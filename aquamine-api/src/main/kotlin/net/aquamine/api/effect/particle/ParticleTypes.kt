package net.aquamine.api.effect.particle

import net.aquamine.annotations.Catalogue
import net.kyori.adventure.key.Key
import net.aquamine.api.registry.Registries
import net.aquamine.api.registry.RegistryReference

/**
 * All the built-in vanilla particle types.
 *
 * See [here](https://minecraft.wiki/w/Particles_(Java_Edition)) for more information
 * on all of these types.
 */
@Catalogue(ParticleType::class)
object ParticleTypes {

    // @formatter:off
    @JvmField val AMBIENT_ENTITY_EFFECT: RegistryReference<SimpleParticleType> = of("ambient_entity_effect")
    @JvmField val ANGRY_VILLAGER: RegistryReference<SimpleParticleType> = of("angry_villager")
    @JvmField val BLOCK: RegistryReference<BlockParticleType> = of("block")
    @JvmField val BLOCK_MARKER: RegistryReference<BlockParticleType> = of("block_marker")
    @JvmField val BUBBLE: RegistryReference<DirectionalParticleType> = of("bubble")
    @JvmField val CLOUD: RegistryReference<DirectionalParticleType> = of("cloud")
    @JvmField val CRIT: RegistryReference<DirectionalParticleType> = of("crit")
    @JvmField val DAMAGE_INDICATOR: RegistryReference<DirectionalParticleType> = of("damage_indicator")
    @JvmField val DRAGON_BREATH: RegistryReference<DirectionalParticleType> = of("dragon_breath")
    @JvmField val DRIPPING_LAVA: RegistryReference<SimpleParticleType> = of("dripping_lava")
    @JvmField val FALLING_LAVA: RegistryReference<SimpleParticleType> = of("falling_lava")
    @JvmField val LANDING_LAVA: RegistryReference<SimpleParticleType> = of("landing_lava")
    @JvmField val DRIPPING_WATER: RegistryReference<SimpleParticleType> = of("dripping_water")
    @JvmField val FALLING_WATER: RegistryReference<SimpleParticleType> = of("falling_water")
    @JvmField val DUST: RegistryReference<DustParticleType> = of("dust")
    @JvmField val DUST_COLOR_TRANSITION: RegistryReference<DustTransitionParticleType> = of("dust_color_transition")
    @JvmField val EFFECT: RegistryReference<SimpleParticleType> = of("effect")
    @JvmField val ELDER_GUARDIAN: RegistryReference<SimpleParticleType> = of("elder_guardian")
    @JvmField val ENCHANTED_HIT: RegistryReference<DirectionalParticleType> = of("enchanted_hit")
    @JvmField val ENCHANT: RegistryReference<DirectionalParticleType> = of("enchant")
    @JvmField val END_ROD: RegistryReference<DirectionalParticleType> = of("end_rod")
    @JvmField val ENTITY_EFFECT: RegistryReference<ColorParticleType> = of("entity_effect")
    @JvmField val EXPLOSION_EMITTER: RegistryReference<SimpleParticleType> = of("explosion_emitter")
    @JvmField val EXPLOSION: RegistryReference<SimpleParticleType> = of("explosion")
    @JvmField val FALLING_DUST: RegistryReference<BlockParticleType> = of("falling_dust")
    @JvmField val FIREWORK: RegistryReference<DirectionalParticleType> = of("firework")
    @JvmField val FISHING: RegistryReference<DirectionalParticleType> = of("fishing")
    @JvmField val FLAME: RegistryReference<DirectionalParticleType> = of("flame")
    @JvmField val SOUL_FIRE_FLAME: RegistryReference<DirectionalParticleType> = of("soul_fire_flame")
    @JvmField val SOUL: RegistryReference<DirectionalParticleType> = of("soul")
    @JvmField val FLASH: RegistryReference<SimpleParticleType> = of("flash")
    @JvmField val HAPPY_VILLAGER: RegistryReference<SimpleParticleType> = of("happy_villager")
    @JvmField val COMPOSTER: RegistryReference<SimpleParticleType> = of("composter")
    @JvmField val HEART: RegistryReference<SimpleParticleType> = of("heart")
    @JvmField val INSTANT_EFFECT: RegistryReference<SimpleParticleType> = of("instant_effect")
    @JvmField val ITEM: RegistryReference<ItemParticleType> = of("item")
    @JvmField val VIBRATION: RegistryReference<VibrationParticleType> = of("vibration")
    @JvmField val ITEM_SLIME: RegistryReference<SimpleParticleType> = of("item_slime")
    @JvmField val ITEM_SNOWBALL: RegistryReference<SimpleParticleType> = of("item_snowball")
    @JvmField val LARGE_SMOKE: RegistryReference<DirectionalParticleType> = of("large_smoke")
    @JvmField val LAVA: RegistryReference<SimpleParticleType> = of("lava")
    @JvmField val MYCELIUM: RegistryReference<SimpleParticleType> = of("mycelium")
    @JvmField val NOTE: RegistryReference<NoteParticleType> = of("note")
    @JvmField val POOF: RegistryReference<DirectionalParticleType> = of("poof")
    @JvmField val PORTAL: RegistryReference<DirectionalParticleType> = of("portal")
    @JvmField val RAIN: RegistryReference<SimpleParticleType> = of("rain")
    @JvmField val SMOKE: RegistryReference<DirectionalParticleType> = of("smoke")
    @JvmField val SNEEZE: RegistryReference<DirectionalParticleType> = of("sneeze")
    @JvmField val SPIT: RegistryReference<DirectionalParticleType> = of("spit")
    @JvmField val SQUID_INK: RegistryReference<DirectionalParticleType> = of("squid_ink")
    @JvmField val SWEEP_ATTACK: RegistryReference<SimpleParticleType> = of("sweep_attack")
    @JvmField val TOTEM_OF_UNDYING: RegistryReference<DirectionalParticleType> = of("totem_of_undying")
    @JvmField val UNDERWATER: RegistryReference<SimpleParticleType> = of("underwater")
    @JvmField val SPLASH: RegistryReference<SimpleParticleType> = of("splash")
    @JvmField val WITCH: RegistryReference<SimpleParticleType> = of("witch")
    @JvmField val BUBBLE_POP: RegistryReference<DirectionalParticleType> = of("bubble_pop")
    @JvmField val CURRENT_DOWN: RegistryReference<SimpleParticleType> = of("current_down")
    @JvmField val BUBBLE_COLUMN_UP: RegistryReference<DirectionalParticleType> = of("bubble_column_up")
    @JvmField val NAUTILUS: RegistryReference<DirectionalParticleType> = of("nautilus")
    @JvmField val DOLPHIN: RegistryReference<SimpleParticleType> = of("dolphin")
    @JvmField val CAMPFIRE_COSY_SMOKE: RegistryReference<DirectionalParticleType> = of("campfire_cosy_smoke")
    @JvmField val CAMPFIRE_SIGNAL_SMOKE: RegistryReference<DirectionalParticleType> = of("campfire_signal_smoke")
    @JvmField val DRIPPING_HONEY: RegistryReference<SimpleParticleType> = of("dripping_honey")
    @JvmField val FALLING_HONEY: RegistryReference<SimpleParticleType> = of("falling_honey")
    @JvmField val LANDING_HONEY: RegistryReference<SimpleParticleType> = of("landing_honey")
    @JvmField val FALLING_NECTAR: RegistryReference<SimpleParticleType> = of("falling_nectar")
    @JvmField val FALLING_SPORE_BLOSSOM: RegistryReference<SimpleParticleType> = of("falling_spore_blossom")
    @JvmField val ASH: RegistryReference<SimpleParticleType> = of("ash")
    @JvmField val CRIMSON_SPORE: RegistryReference<SimpleParticleType> = of("crimson_spore")
    @JvmField val WARPED_SPORE: RegistryReference<SimpleParticleType> = of("warped_spore")
    @JvmField val SPORE_BLOSSOM_AIR: RegistryReference<SimpleParticleType> = of("spore_blossom_air")
    @JvmField val DRIPPING_OBSIDIAN_TEAR: RegistryReference<SimpleParticleType> = of("dripping_obsidian_tear")
    @JvmField val FALLING_OBSIDIAN_TEAR: RegistryReference<SimpleParticleType> = of("falling_obsidian_tear")
    @JvmField val LANDING_OBSIDIAN_TEAR: RegistryReference<SimpleParticleType> = of("landing_obsidian_tear")
    @JvmField val REVERSE_PORTAL: RegistryReference<DirectionalParticleType> = of("reverse_portal")
    @JvmField val WHITE_ASH: RegistryReference<SimpleParticleType> = of("white_ash")
    @JvmField val SMALL_FLAME: RegistryReference<SimpleParticleType> = of("small_flame")
    @JvmField val SNOWFLAKE: RegistryReference<SimpleParticleType> = of("snowflake")
    @JvmField val DRIPPING_DRIPSTONE_LAVA: RegistryReference<SimpleParticleType> = of("dripping_dripstone_lava")
    @JvmField val FALLING_DRIPSTONE_LAVA: RegistryReference<SimpleParticleType> = of("falling_dripstone_lava")
    @JvmField val DRIPPING_DRIPSTONE_WATER: RegistryReference<SimpleParticleType> = of("dripping_dripstone_water")
    @JvmField val FALLING_DRIPSTONE_WATER: RegistryReference<SimpleParticleType> = of("falling_dripstone_water")
    @JvmField val GLOW_SQUID_INK: RegistryReference<SimpleParticleType> = of("glow_squid_ink")
    @JvmField val GLOW: RegistryReference<SimpleParticleType> = of("glow")
    @JvmField val WAX_ON: RegistryReference<SimpleParticleType> = of("wax_on")
    @JvmField val WAX_OFF: RegistryReference<SimpleParticleType> = of("wax_off")
    @JvmField val ELECTRIC_SPARK: RegistryReference<SimpleParticleType> = of("electric_spark")
    @JvmField val SCRAPE: RegistryReference<SimpleParticleType> = of("scrape")

    // @formatter:on
    @JvmStatic
    private fun <T : ParticleType> of(name: String): RegistryReference<T> = RegistryReference.of(Registries.PARTICLE_TYPE, Key.key(name))
}
